@using CineBook.Interface
@inject IChatService _chatService;
@inject IAuthService _authService;
@{
    var ChatIdFromUrl = Context.Request.Query["ChatId"];

    
    

    // Use the decoded ChatId to get the chat
    var CurrentChat = await _chatService.GetChatById(ChatIdFromUrl);
    var LoggedInUser = await _authService.GetLoggedInUserAsync();
    
}

<div id="compactChat" class="fixed bottom-4 right-4 w-[400px] bg-gray-900 rounded-lg shadow-xl flex flex-col">
    <!-- Compact Chat Header -->
    <div class="p-4 border-b border-gray-700 flex justify-between items-center">
        <h3 class="text-lg font-semibold text-white">New Support Request</h3>
     
    </div>

    <!-- Chat Status and Topic Section (Above the Messages) -->
    <div class="p-4 border-b border-gray-700 text-white bg-gray-800">
        <div class="flex justify-between mb-2">
            <span><strong>Status:</strong> <span id="chatStatus">@CurrentChat.Status</span></span>
            <span><strong>Topic:</strong> <span id="chatTopic">@CurrentChat.Topic</span></span>
        </div>
    </div>

    <!-- Compact Chat Messages -->
    <div id="compactChatMessages" class="flex-1 overflow-y-auto p-4 space-y-4">
        @foreach (var message in await _chatService.GetSameChatMessagesById(ChatIdFromUrl))
        {
            if (message.Role == "Admin")
            {
                <!-- Admin's message (align right) -->
                <div class="flex justify-end gap-3">
                    <div class="bg-gray-800 rounded-lg p-3 max-w-[80%]">
                        <div class="text-sm text-gray-400 mb-1">
                            Admin / <span>@message.SentAt</span>
                        </div>
                        <p class="text-white">@message.Content</p>
                    </div>
                </div>
            }
            else if (message.Role == "User")
            {
                <!-- User's message (align left) -->
                <div class="flex items-start gap-3">
                    <div class="bg-blue-500 text-white rounded-lg p-3 max-w-[80%]">
                        <div class="text-sm text-gray-400 mb-1">
                            You / <span>@message.SentAt</span>
                        </div>
                        <p>@message.Content</p>
                    </div>
                </div>
            }
        }



    </div>


    <!-- Compact Chat Input -->
    <div class="p-4 border-t border-gray-700">
        <form id="compactChatForm" class="flex gap-2" asp-action="SendChatMessageAction" asp-controller="Help" method="post">
            <input name="ChatId" hidden value="@ChatIdFromUrl" />
            <input name="AgentId" hidden value="@LoggedInUser.Id" />
            @if (CurrentChat.Status.ToString().ToLower() == "pending" || CurrentChat.Status.ToString().ToLower() == "closed")
            {
                <input type="text" id="compactMessageInput" placeholder="Type your message..." disabled name="Content" class="flex-1 bg-gray-800 border border-gray-700 rounded p-2 text-white focus:outline-none focus:border-blue-500">
                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600" disabled>Send</button>
            }
            else
            {
                <input type="text" id="compactMessageInput" placeholder="Type your message..." name="Content" class="flex-1 bg-gray-800 border border-gray-700 rounded p-2 text-white focus:outline-none focus:border-blue-500">
                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Send</button>
            }
        </form>
    </div>

</div>

<script>
    // Close compact chat window
    document.getElementById('closeCompactChat')?.addEventListener('click', () => {
        document.getElementById('compactChat')?.classList.add('hidden');
    });

    document.addEventListener('DOMContentLoaded', () => {
        const chatStatus = '@CurrentChat.Status'.toLowerCase(); // Get the chat status as a string
        const botMessageElement = document.getElementById('botMessage');
        const botMessageTime = document.getElementById('botMessageTime');

        let botMessage = '';
        let formattedDate = new Date().toLocaleString('en-US', {
            hour: 'numeric',
            minute: 'numeric',
            hour12: true
        });
        botMessageTime.innerText = formattedDate;

        // Check chat status and set the bot message accordingly
        if (chatStatus === 'pending') {
            botMessage = 'Please kindly wait for support to assist you.';
        } else if (chatStatus === 'closed') {
            botMessage = 'Thank you for your time. The chat has been closed. Goodbye!';
        } else if (chatStatus === 'open') {
            botMessage = 'Hello! How can we assist you today? Please let us know your issue.';
        }

        // Set the bot message in the chat
        botMessageElement.innerText = botMessage;
    });
</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>